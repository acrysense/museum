"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // functions
  function setLineClamp(element, maxHeight) {
    var lineHeight = parseFloat(getComputedStyle(element).lineHeight);
    var clampValue = Math.floor(maxHeight / lineHeight);
    element.style.setProperty('-webkit-line-clamp', clampValue);
  }
  function mainItemGetHeight(items) {
    items.forEach(function (item) {
      var contentBlockHeight = item.clientHeight;
      var title = item.querySelector('.main__title');
      var description = item.querySelector('.main__description');
      if (title && description) {
        var titleHeight = title.getBoundingClientRect().height;
        var remainingHeight = contentBlockHeight - titleHeight - parseInt(getComputedStyle(description).paddingTop);
        if (remainingHeight > 0) {
          setLineClamp(description, remainingHeight);
        } else {
          setLineClamp(description, 0);
        }
      }
    });
  }
  function generateEmptyColumns(container, numColumns, className) {
    for (var i = 1; i <= numColumns; i++) {
      var gridItem = document.createElement('div');
      gridItem.classList.add(className);
      container.appendChild(gridItem);
    }
  }

  // mobile menu
  var mobileMenu = document.getElementById('menu');
  var mobileMenuTrigger = document.getElementById('hamburger-toggle');
  var mobileMenuClose = document.querySelector('.menu__close');
  if (mobileMenu && mobileMenuTrigger) {
    mobileMenuTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        mobileMenu.classList.remove('is--active');
        document.body.classList.remove('scroll-disabled');
      } else {
        mobileMenu.classList.add('is--active');
        document.body.classList.add('scroll-disabled');
      }
    });
    if (mobileMenuClose) {
      mobileMenuClose.addEventListener('click', function (event) {
        event.preventDefault();
        if (mobileMenu.classList.contains('is--active')) {
          mobileMenu.classList.remove('is--active');
          document.body.classList.remove('scroll-disabled');
        }
      });
    }
  }

  // search
  var search = document.querySelector('.c-search');
  var searchClose = document.querySelector('.c-search__close');
  var searchTrigger = document.querySelectorAll('.c-search-trigger__btn');
  if (search && searchTrigger && searchClose) {
    searchTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!search.classList.contains('is--active')) {
          search.classList.add('is--active');
        }
      });
    });
    searchClose.addEventListener('click', function (event) {
      event.preventDefault();
      var input = search.querySelector('.c-search__input');
      if (search.classList.contains('is--active')) {
        search.classList.remove('is--active');
        if (input) {
          input.value = '';
        }
      }
    });
  }

  // select
  var selected = document.querySelectorAll('.select-box__selected');
  var optionsList = document.querySelectorAll('.select-box__option');
  if (selected) {
    selected.forEach(function (item) {
      var close = function close() {
        document.querySelectorAll('.select-box__container').forEach(function (child) {
          child.classList.remove('select-box__container--active');
          child.removeAttribute('style');
        });
        document.querySelectorAll('.select-box__selected').forEach(function (child) {
          return child.classList.remove('select-box__selected--active');
        });
      };
      var itemChecker = useItemChecker([item.parentNode].concat(_toConsumableArray(selected)), close);
      item.addEventListener('click', function () {
        var container = item.previousElementSibling;
        if (container.classList.contains('select-box__container--active')) {
          close();
        } else {
          close();
          container.classList.add('select-box__container--active');
          item.classList.add('select-box__selected--active');
          itemChecker.setBodyChecker();
        }
      });
    });
  }
  if (optionsList) {
    optionsList.forEach(function (option) {
      option.addEventListener('click', function (event) {
        event.preventDefault();
        var parent = option.closest('.select-box');
        var currentContainer = parent.querySelector('.select-box__container');
        var currentSelected = parent.querySelector('.select-box__selected');
        var currentSelectedPlaceholder = currentSelected.querySelector('.select-box__placeholder');
        var currentSelectedValue = currentSelected.querySelector('.select-box__values');
        if (option.querySelector('input').checked) {
          return false;
        } else {
          option.querySelector('input').checked = true;
        }
        if (currentSelectedPlaceholder.classList.contains('select-box__placeholder--active')) {
          currentSelectedPlaceholder.classList.remove('select-box__placeholder--active');
          currentSelectedValue.classList.add('select-box__values--active');
        }
        currentSelectedValue.innerHTML = option.querySelector('.select-box__label').innerHTML;
        currentContainer.classList.remove('select-box__container--active');
        currentSelected.classList.remove('select-box__selected--active');
      });
    });
  }

  // main dynamic
  var mainItems = document.querySelectorAll('.main__item');
  if (mainItems) {
    mainItemGetHeight(mainItems);
  }

  // resident
  // function splitTextIntoColumns(textBlock, columnWidth, heightRatio) {
  //     const maxHeight = columnWidth * heightRatio; // Максимальная высота для колонки
  //     const text = textBlock.textContent.trim(); // Получаем текст
  //     const words = text.split(' '); // Разбиваем текст на слова
  //     let currentHeight = 0;
  //     let currentColumnText = ''; // Для текущего параграфа
  //     let nextColumnText = ''; // Текст для следующей колонки
  //     let tempParagraph = document.createElement('p'); // Временный параграф для измерений

  //     // Проверяем каждое слово, добавляя его к параграфу
  //     for (let word of words) {
  //       tempParagraph.textContent = currentColumnText + ' ' + word;
  //       textBlock.appendChild(tempParagraph);

  //       // Если текст превышает максимальную высоту, переносим оставшийся текст
  //       if (textBlock.scrollHeight > maxHeight) {
  //         nextColumnText = words.slice(words.indexOf(word)).join(' '); // Оставшийся текст
  //         break;
  //       }

  //       // Если высота не превышена, добавляем слово к текущему тексту
  //       currentColumnText += ' ' + word;
  //       textBlock.removeChild(tempParagraph); // Удаляем временный элемент после проверки
  //     }

  //     // Устанавливаем текст для текущей колонки
  //     textBlock.textContent = currentColumnText.trim();

  //     // Если есть текст для следующей колонки, создаём новую колонку
  //     if (nextColumnText.trim()) {
  //       const newColumn = document.createElement('div');
  //       newColumn.classList.add('resident__content-block');
  //       newColumn.innerHTML = `<p>${nextColumnText.trim()}</p>`;
  //       textBlock.parentNode.appendChild(newColumn);

  //       // Рекурсивно вызываем функцию для переноса оставшегося текста
  //       splitTextIntoColumns(newColumn, columnWidth, heightRatio);
  //     }
  // }

  // const textBlock = document.querySelector('.resident__content-block');
  // const columnWidth = 210; // Ширина колонки
  // const heightRatio = 1.3667; // Высота 136.67% от ширины

  // splitTextIntoColumns(textBlock, columnWidth, heightRatio);

  // function distributeTextFromDiv(divId) {
  //     const contentDiv = document.getElementById(divId);
  //     const columns = document.querySelectorAll('.text-column');
  //     let currentColumn = 0;

  //     // Функция для добавления элемента в колонку с проверкой высоты
  //     function tryAddElement(element) {
  //       if (currentColumn >= columns.length) return; // Останавливаем на последней колонке

  //       columns[currentColumn].appendChild(element);

  //       // Проверяем, не превышена ли высота
  //       if (columns[currentColumn].scrollHeight > 500) {
  //         columns[currentColumn].removeChild(element); // Если не помещается, удаляем
  //         currentColumn++;
  //         if (currentColumn < columns.length) {
  //           columns[currentColumn].appendChild(element); // Добавляем в следующую колонку
  //         }
  //       }
  //     }

  //     // Проходим по каждому элементу контента
  //     contentDiv.childNodes.forEach((node) => {
  //       if (currentColumn >= columns.length) return; // Останавливаемся на последней колонке

  //       // Если это <p>, создаём span и добавляем в колонку
  //       if (node.nodeName === 'P') {
  //         const span = document.createElement('span');
  //         span.innerHTML = node.innerHTML; // Копируем контент <p> внутрь <span>
  //         tryAddElement(span);

  //         // Добавляем отступ вместо <p>
  //         if (currentColumn < columns.length) {
  //           const spanSpace = document.createElement('span');
  //           spanSpace.classList.add('span-space');
  //           tryAddElement(spanSpace);
  //         }
  //       }

  //       // Если это <br>, добавляем отступ через span
  //       if (node.nodeName === 'BR') {
  //         const spanSpace = document.createElement('span');
  //         spanSpace.classList.add('span-space');
  //         tryAddElement(spanSpace);
  //       }
  //     });
  // }

  // distributeTextFromDiv('content');

  // resident alphabet
  var residentAlphabetWrapper = document.querySelector('.residents-alphabet__wrapper');
  if (residentAlphabetWrapper) {
    var alphabetHeight = residentAlphabetWrapper.getBoundingClientRect().height;
    console.log(alphabetHeight / 5);
    // generateEmptyColumns(residentAlphabetWrapper, 5, 'residents-alphabet__item');
  }

  // window
  window.addEventListener('resize', function () {
    if (mainItems) {
      mainItemGetHeight(mainItems);
    }
  });
});