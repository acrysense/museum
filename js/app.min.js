"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // functions
  function setLineClamp(element, maxHeight) {
    var lineHeight = parseFloat(getComputedStyle(element).lineHeight);
    var clampValue = Math.floor(maxHeight / lineHeight);
    element.style.setProperty('-webkit-line-clamp', clampValue);
  }
  function mainItemGetHeight(items) {
    items.forEach(function (item) {
      var contentBlockHeight = item.clientHeight;
      var title = item.querySelector('.main__title');
      var description = item.querySelector('.main__description');
      if (title && description) {
        var titleHeight = title.getBoundingClientRect().height;
        var remainingHeight = contentBlockHeight - titleHeight - parseInt(getComputedStyle(description).paddingTop);
        if (remainingHeight > 0) {
          setLineClamp(description, remainingHeight);
        } else {
          setLineClamp(description, 0);
        }
      }
    });
  }
  function generateEmptyColumns(container, numColumns, className) {
    for (var i = 1; i <= numColumns; i++) {
      var gridItem = document.createElement('div');
      gridItem.classList.add(className);
      container.appendChild(gridItem);
    }
  }

  // mobile menu
  var mobileMenu = document.getElementById('menu');
  var mobileMenuTrigger = document.getElementById('hamburger-toggle');
  var mobileMenuClose = document.querySelector('.menu__close');
  if (mobileMenu && mobileMenuTrigger) {
    mobileMenuTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        mobileMenu.classList.remove('is--active');
        document.body.classList.remove('scroll-disabled');
      } else {
        mobileMenu.classList.add('is--active');
        document.body.classList.add('scroll-disabled');
      }
    });
    if (mobileMenuClose) {
      mobileMenuClose.addEventListener('click', function (event) {
        event.preventDefault();
        if (mobileMenu.classList.contains('is--active')) {
          mobileMenu.classList.remove('is--active');
          document.body.classList.remove('scroll-disabled');
        }
      });
    }
  }

  // search
  var search = document.querySelector('.c-search');
  var searchClose = document.querySelector('.c-search__close');
  var searchTrigger = document.querySelectorAll('.c-search-trigger__btn');
  if (search && searchTrigger && searchClose) {
    searchTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!search.classList.contains('is--active')) {
          search.classList.add('is--active');
        }
      });
    });
    searchClose.addEventListener('click', function (event) {
      event.preventDefault();
      var input = search.querySelector('.c-search__input');
      if (search.classList.contains('is--active')) {
        search.classList.remove('is--active');
        if (input) {
          input.value = '';
        }
      }
    });
  }

  // select
  var selected = document.querySelectorAll('.select-box__selected');
  var optionsList = document.querySelectorAll('.select-box__option');
  if (selected) {
    selected.forEach(function (item) {
      var close = function close() {
        document.querySelectorAll('.select-box__container').forEach(function (child) {
          child.classList.remove('select-box__container--active');
          child.removeAttribute('style');
        });
        document.querySelectorAll('.select-box__selected').forEach(function (child) {
          return child.classList.remove('select-box__selected--active');
        });
      };
      var itemChecker = useItemChecker([item.parentNode].concat(_toConsumableArray(selected)), close);
      item.addEventListener('click', function () {
        var container = item.previousElementSibling;
        if (container.classList.contains('select-box__container--active')) {
          close();
        } else {
          close();
          container.classList.add('select-box__container--active');
          item.classList.add('select-box__selected--active');
          itemChecker.setBodyChecker();
        }
      });
    });
  }
  if (optionsList) {
    optionsList.forEach(function (option) {
      option.addEventListener('click', function (event) {
        event.preventDefault();
        var parent = option.closest('.select-box');
        var currentContainer = parent.querySelector('.select-box__container');
        var currentSelected = parent.querySelector('.select-box__selected');
        var currentSelectedPlaceholder = currentSelected.querySelector('.select-box__placeholder');
        var currentSelectedValue = currentSelected.querySelector('.select-box__values');
        if (option.querySelector('input').checked) {
          return false;
        } else {
          option.querySelector('input').checked = true;
        }
        if (currentSelectedPlaceholder.classList.contains('select-box__placeholder--active')) {
          currentSelectedPlaceholder.classList.remove('select-box__placeholder--active');
          currentSelectedValue.classList.add('select-box__values--active');
        }
        currentSelectedValue.innerHTML = option.querySelector('.select-box__label').innerHTML;
        currentContainer.classList.remove('select-box__container--active');
        currentSelected.classList.remove('select-box__selected--active');
      });
    });
  }

  // history columns
  var historyContent = document.querySelectorAll('.history__content');
  if (historyContent) {
    setTimeout(function () {
      historyContent.forEach(function (item) {
        var parent = item.closest('.history__wrapper');
        var columnsContainer = parent.querySelector('.history__columns');
        var columns = Array.from(columnsContainer.querySelectorAll('.history__column'));
        // const columnWidth = Number(columns[0].getBoundingClientRect().width * 1.361904761904762)
        var columnWidth = 287;
        var fullText = Array.from(item.querySelectorAll('p')).map(function (p) {
          return p.innerHTML.trim();
        }).join(' ||BR|| ');
        var currentColumn = 0;
        var remainingText = fullText;
        function distributeText() {
          for (var _currentColumn = 0; _currentColumn < 6 && remainingText; _currentColumn++) {
            var tempText = remainingText;

            // Заменяем маркер "||BR||" на <br> с контролем line-height
            columns[_currentColumn].querySelector('.history__column-inner').innerHTML = tempText.replace(/ \|\|BR\|\| /g, '<br><br>');

            // Проверяем высоту текущей колонки
            if (columns[_currentColumn].scrollHeight > columnWidth) {
              // Если текст выходит за пределы, удаляем слова, пока не уместится
              while (columns[_currentColumn].scrollHeight > columnWidth) {
                tempText = tempText.substring(0, tempText.lastIndexOf(' '));
                columns[_currentColumn].querySelector('.history__column-inner').innerHTML = tempText.replace(/ \|\|BR\|\| /g, '<br><br>');
              }

              // Очищаем маркеры и подготавливаем следующий текст
              var currentText = columns[_currentColumn].querySelector('.history__column-inner').innerHTML;
              columns[_currentColumn].querySelector('.history__column-inner').innerHTML = currentText.replaceAll('||BR||', '');

              // Удаляем использованный текст
              remainingText = remainingText.slice(tempText.length).trim().replace(/^\|\|BR\|\|/, "").trim();
            } else {
              // Если весь текст помещается, обнуляем remainingText и выходим из цикла
              remainingText = '';
            }
          }

          // while (remainingText && currentColumn < 6) {
          //     let tempText = remainingText;

          //     // Заменяем маркер "||BR||" на отступ <br> с контролем line-height
          //     columns[currentColumn].querySelector('.history__column-inner').innerHTML = tempText.replace(/ \|\|BR\|\| /g, '<br><br>');

          //     console.log(columns[currentColumn].scrollHeight > columnWidth)

          //     // Проверяем высоту текущей колонки
          //     if (columns[currentColumn].scrollHeight > columnWidth) {
          //         // Если текст выходит за пределы, постепенно удаляем последние слова
          //         while (columns[currentColumn].scrollHeight > columnWidth) {
          //             tempText = tempText.substring(0, tempText.lastIndexOf(' '));
          //             columns[currentColumn].querySelector('.history__column-inner').innerHTML = tempText.replace(/ \|\|BR\|\| /g, '<br><br>');
          //         }

          //         let currentText = columns[currentColumn].querySelector('.history__column-inner').innerHTML
          //         columns[currentColumn].querySelector('.history__column-inner').innerHTML = currentText.replaceAll('||BR||', '');

          //         // Удаляем использованный текст и очищаем ненужные маркеры ||BR||
          //         remainingText = remainingText.slice(tempText.length).trim().replace(/^\|\|BR\|\|/, "").trim();
          //         currentColumn++;
          //     } else {
          //         // Если весь текст помещается, обнуляем remainingText и завершаем цикл
          //         remainingText = '';
          //     }
          // }
        }

        distributeText();

        // // Собираем изображения из исходного блока
        // const images = Array.from(item.querySelectorAll('img'));

        // // Добавляем изображения в пустые колонки
        // columns.forEach(column => {
        //     if (!column.querySelector('.history__column-inner').innerHTML.trim() && images.length > 0) {
        //         const img = images.shift();
        //         column.querySelector('.history__column-inner').appendChild(img);
        //     }
        // });

        // columns.forEach(column => {
        //     if (!column.querySelector('.history__column-inner').innerHTML.trim()) {
        //         column.classList.add('history__column--empty');
        //     }
        // });
      });
    }, 1000);
  }

  // about columns
  var aboutContent = document.querySelectorAll('.about__content');
  if (aboutContent) {
    aboutContent.forEach(function (item) {
      var parent = item.closest('.about__wrapper');
      var columnsContainer = parent.querySelector('.about__columns');
      var columns = Array.from(columnsContainer.querySelectorAll('.about__column'));
      var columnWidth = Number(columns[0].getBoundingClientRect().width * 1.361904761904762);
      console.log(columnWidth);
      var fullText = Array.from(item.querySelectorAll('p')).map(function (p) {
        return p.innerHTML.trim();
      }).join(' ||BR|| ');
      var currentColumn = 0;
      var remainingText = fullText;
      function distributeText() {
        while (remainingText && currentColumn < columns.length) {
          var tempText = remainingText;

          // Заменяем маркер "||BR||" на отступ <br> с контролем line-height
          columns[currentColumn].querySelector('.about__column-inner').innerHTML = tempText.replace(/ \|\|BR\|\| /g, '<br><br>');

          // Проверяем высоту текущей колонки
          if (columns[currentColumn].scrollHeight > Number(columns[currentColumn].getBoundingClientRect().width * 1.361904761904762)) {
            // Если текст выходит за пределы, постепенно удаляем последние слова
            while (columns[currentColumn].scrollHeight > Number(columns[currentColumn].getBoundingClientRect().width * 1.361904761904762)) {
              tempText = tempText.substring(0, tempText.lastIndexOf(' '));
              columns[currentColumn].querySelector('.about__column-inner').innerHTML = tempText.replace(/ \|\|BR\|\| /g, '<br><br>');
            }
            var currentText = columns[currentColumn].querySelector('.about__column-inner').innerHTML;
            columns[currentColumn].querySelector('.about__column-inner').innerHTML = currentText.replaceAll('||BR||', '');

            // Удаляем использованный текст и очищаем ненужные маркеры ||BR||
            remainingText = remainingText.slice(tempText.length).trim().replace(/^\|\|BR\|\|/, "").trim();
            currentColumn++;
          } else {
            // Если весь текст помещается, обнуляем remainingText и завершаем цикл
            remainingText = '';
          }
        }
      }
      distributeText();

      // Собираем изображения из исходного блока
      var images = Array.from(item.querySelectorAll('img'));

      // Добавляем изображения в пустые колонки
      columns.forEach(function (column) {
        if (!column.querySelector('.about__column-inner').innerHTML.trim() && images.length > 0) {
          var img = images.shift();
          column.querySelector('.about__column-inner').appendChild(img);
        }
      });
      columns.forEach(function (column) {
        if (!column.querySelector('.about__column-inner').innerHTML.trim()) {
          column.classList.add('about__column--empty');
        }
      });
    });
  }

  // main dynamic
  var mainItems = document.querySelectorAll('.main__item');
  if (mainItems) {
    mainItemGetHeight(mainItems);
  }

  // window
  window.addEventListener('resize', function () {
    if (mainItems) {
      mainItemGetHeight(mainItems);
    }
  });
});